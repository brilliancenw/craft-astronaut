{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{% set title = "API Configuration" %}
{% set selectedSubnavItem = selectedTab %}

{% block content %}
    <form method="post" accept-charset="UTF-8">
        {{ csrfInput() }}
        {{ actionInput('launcher-assistant/admin/save-api-config') }}
        {{ redirectInput('launcher/api-config') }}

        <div class="readable">
            <h1>API Configuration</h1>
            <p>Configure your AI provider and model settings.</p>

            <div class="readable" style="background: #eff6ff; border: 1px solid #3b82f6; padding: 16px; border-radius: 8px; margin-bottom: 24px;">
                <strong>API Keys:</strong> To configure API keys, go to <a href="{{ url('settings/plugins/launcher-assistant') }}">Settings â†’ Launcher Assistant</a>.
                <br><small class="light">API keys are stored separately in the Settings page for security.</small>
            </div>

            {{ forms.selectField({
                label: 'AI Provider',
                instructions: 'Choose which AI provider to use for the assistant.',
                id: 'aiProvider',
                name: 'aiProvider',
                value: aiSettings.aiProvider,
                options: {
                    'claude': 'Claude (Anthropic)',
                    'openai': 'OpenAI (Coming Soon)',
                    'gemini': 'Gemini (Google - Coming Soon)'
                },
                required: true
            }) }}

            <hr>

            <h2>Claude Model Selection</h2>

            <div id="claude-model-selector" style="margin-top: 24px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px;">
                    <button type="button" id="fetch-models-btn" class="btn" style="margin: 0;">
                        Fetch Available Models
                    </button>
                    <span id="fetch-models-status" style="color: #666;"></span>
                </div>

                <div id="model-select-container" style="display: none;">
                    {{ forms.selectField({
                        label: 'Claude Model',
                        instructions: 'Select which Claude model to use. Newer models appear first.',
                        id: 'claudeModel',
                        name: 'claudeModel',
                        value: aiSettings.claudeModel ?? 'claude-sonnet-4-20250514',
                        options: []
                    }) }}
                </div>

                <p id="no-models-message" class="light" style="display: none; color: #dc2626;">
                    <strong>No models available.</strong> Please configure your Claude API key in <a href="{{ url('settings/plugins/launcher-assistant') }}">Settings</a> and try again.
                </p>
            </div>
        </div>

        <div class="buttons">
            <button type="submit" class="btn submit">Save Configuration</button>
        </div>
    </form>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const fetchBtn = document.getElementById('fetch-models-btn');
        const statusSpan = document.getElementById('fetch-models-status');
        const modelContainer = document.getElementById('model-select-container');
        const noModelsMessage = document.getElementById('no-models-message');
        const modelSelect = document.getElementById('claudeModel');

        if (!fetchBtn || !statusSpan || !modelContainer || !modelSelect) {
            return;
        }

        // Fetch models on button click
        fetchBtn.addEventListener('click', async function() {
            fetchBtn.disabled = true;
            statusSpan.textContent = 'Fetching models...';
            statusSpan.style.color = '#666';
            modelContainer.style.display = 'none';
            noModelsMessage.style.display = 'none';

            try {
                const response = await fetch(Craft.getActionUrl('launcher-assistant/ai/models'), {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'X-CSRF-Token': Craft.csrfTokenValue
                    }
                });

                const data = await response.json();

                if (data.success && data.models && data.models.length > 0) {
                    // Clear existing options
                    modelSelect.innerHTML = '';

                    // Add models to select (they're already sorted by creation date, newest first)
                    data.models.forEach(function(model) {
                        const option = document.createElement('option');
                        option.value = model.id;
                        option.textContent = model.display_name + ' (' + model.id + ')';
                        modelSelect.appendChild(option);
                    });

                    // Set current value if it exists in the list
                    const currentValue = '{{ aiSettings.claudeModel ?? "claude-sonnet-4-20250514" }}';
                    if (currentValue && Array.from(modelSelect.options).some(opt => opt.value === currentValue)) {
                        modelSelect.value = currentValue;
                    }

                    modelContainer.style.display = 'block';
                    statusSpan.textContent = 'Found ' + data.models.length + ' model(s)';
                    statusSpan.style.color = '#059669';
                } else {
                    noModelsMessage.style.display = 'block';
                    statusSpan.textContent = data.message || 'No models found';
                    statusSpan.style.color = '#dc2626';
                }
            } catch (error) {
                console.error('Error fetching models:', error);
                statusSpan.textContent = 'Error: ' + error.message;
                statusSpan.style.color = '#dc2626';
                noModelsMessage.style.display = 'block';
            } finally {
                fetchBtn.disabled = false;
            }
        });

        // Auto-fetch models if API key is configured
        {% if craft.app.plugins.getPlugin('launcher-assistant').aiSettingsService.hasApiKey('claude') %}
            fetchBtn.click();
        {% endif %}
    });
    </script>
{% endblock %}
